rmarkdown::render('book2.Rmd')
rmarkdown::render('book2.Rmd')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
glimpse(starwars)
starwars
mysw <- starwars %>% select(name, gender, height, mass)
mysw
mysw <- mysw %>% mutate(bmi = mass/(height/100)^2)
mysw
mysw <- mysw %>% mutate(bmi2 = bmi^2)
mysw
mysw <- mysw %>% rename(bmisq = bmi2)
mysw
mysw <- mysw %>% arrange(desc(bmi))
mysw
mysw <- mysw %>% arrange(bmi)
mysw
mysw_m_40 <- mysw %>% filter(gender == 'male', bmi >= 40)
mysw_m_40
mysw_ht_45 <- mysw %>% filter(height >200 | bmi >45, bmi != 'NA')
mysw_ht_45
mysw_g <- mysw %>% group_by(gender)
mysw_g
mysw_g %>% summarise(meanbmi = mean(bmi, na.rm = TRUE),
meanht  = mean(height, na.rm = TRUE),
meanmass = mean(mass, na.rm = TRUE),
sdbmi = sd(bmi, na.rm = TRUE),
sdht = sd(height, na.rm = TRUE),
sdmass = sd(mass, na.rm = TRUE))
freq_species <- starwars %>% count(species, sort = TRUE)
freq_species
freq_species_home <- starwars %>% count(species, homeworld, sort = TRUE)
freq_species_home
starwars %>% filter(gender == "male", height > 100, mass > 100) %>%
select(height, mass, species) %>%
group_by(species) %>%
summarize(mean_ht = mean(height, na.rm = TRUE),
mean_mass = mean(mass, na.rm = TRUE),
freq = n())
sex1 <- rbinom(n = 100, size = 1, prob = 0.5)
str(sex1)
race1 <- rep(seq(1:4), 25)
str(race1)
data_f <- tibble(sex1, race1)
head(data_f)
str(data_f)
data_f$male <- factor(data_f$sex1, labels = c('No', 'Yes'))
data_f$race2 <- factor(data_f$race1, labels = c('Mal', 'Chi', 'Ind', 'Others'))
str(data_f)
head(data_f) ; tail(data_f)
library(forcats)
data_f$male2 <- data_f$male %>% fct_recode('Fem' = 'No', 'Male' = 'Yes')
data_f <- data_f %>% mutate(malay = fct_recode(race2,
'Non-Malay' = 'Chi',
'Non-Malay' = 'Ind',
'Non-Malay' = 'Others'))
head(data_f) ; tail(data_f)
sessionInfo()
install.packages("here")
library(here)
here
here()
ggsave(here::here("plots", "my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
library(tidyverse)
ggsave(here::here("plots", "my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
ggsave(here::here("plots", "my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
ggsave(here::here("plots","my_pdf_plot.pdf"))
ggsave(here::here("plots","my_png_plot.png"))
ggsave(here::here("plots","my_jpg_plot.jpg"))
ggsave(here::here("plots","my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
ggsave(here::here("plots","my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
ggsave(here::here("plots","my_pdf_plot2.pdf"))
ggsave(here::here("plots","my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
?ggsave
knitr::opts_chunk$set(out.width = '70%' , fig.align = 'center')
library(tidyverse)
library(gapminder)
head(gapminder)
glimpse(gapminder)
summary(gapminder)
?gapminder
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp))
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp, colour = continent))
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp, size = gdpPercap))
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp, shape = continent))
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp), colour = 'blue')
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp), shape = 3)
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp)) +
facet_wrap(~ continent, nrow = 3)
ggplot(data = gapminder) +
geom_point(mapping = aes(x = year, y = lifeExp)) +
facet_wrap(~ continent, nrow = 2)
ggplot(data = gapminder) +
geom_point(mapping = aes(x = gdpPercap, y = lifeExp))
ggplot(data = gapminder) +
geom_smooth(mapping = aes(x = gdpPercap, y = lifeExp))
ggplot(data = gapminder) +
geom_smooth(mapping = aes(x = log(gdpPercap), y = lifeExp, linetype = continent))
ggplot(data = gapminder) +
geom_smooth(mapping = aes(x = log(gdpPercap), y = lifeExp, colour = continent))
ggplot(data = gapminder) +
geom_point(mapping = aes(x = log(gdpPercap), y = lifeExp)) +
geom_smooth(mapping = aes(x = log(gdpPercap), y = lifeExp))
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
geom_point() +
geom_smooth()
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(mapping = aes(colour = continent)) +
geom_smooth()
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
geom_point() +
geom_smooth(mapping = aes(colour = continent))
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
geom_point(mapping = aes(shape = continent)) +
geom_smooth(mapping = aes(colour = continent))
ggplot(data = gapminder) +
geom_bar(mapping = aes(x = continent))
ggplot(data = gapminder) +
geom_bar(mapping = aes(x = continent, y = ..prop..,
group = 1))
mypop <- ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
geom_point() +
geom_smooth(mapping = aes(colour = continent))
mypop
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy")
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
\nData from Gapminder")
mypop + scale_x_continuous(breaks = seq(0,12,1))
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
\nData from Gapminder") + ylab("Life Expentancy") + xlab("Percapita GDP in log")
mypop + theme_bw()
mypop + theme_classic()
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
\nData from Gapminder") + ylab("Life Expentancy") + xlab("Percapita GDP in log") +
scale_x_continuous(breaks = seq(0,12,1)) +
theme_classic()
library(here)
ggsave(here("plots","my_pdf_plot.pdf"))
ggsave(here::here("plots","my_png_plot.png"))
ggsave(here::here("plots","my_jpg_plot.jpg"))
ggsave(here::here("plots","my_pdf_plot2.pdf"))
ggsave(here::here("plots","my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
library(here)
ggsave(here("plots","my_pdf_plot.pdf"))
ggsave(here("plots","my_png_plot.png"))
ggsave(here("plots","my_jpg_plot.jpg"))
ggsave(here("plots","my_pdf_plot2.pdf"))
ggsave(here("plots","my_pdf_plot2.pdf", width = 10, height = 6, units = "cm"))
ggsave(here("plots","my_pdf_plot2.pdf", width = 10, height = 6, units = "cm",
dpi = 150, device = 'pdf'))
ggsave('my_pdf_plot2.pdf', width = 10, height = 6, units = "cm",
dpi = 150, device = 'pdf')
ggsave('my_pdf_plot2.pdf', width = 10, height = 6, units = "cm",
dpi = 150, device = 'pdf')
ggsave('my_pdf_plot2.pdf', width = 10, height = 6, units = "cm",
dpi = 150, device = 'pdf')
ggsave(here('plots','my_pdf_plot2.pdf', width = 10, height = 6, units = "cm",
dpi = 150, device = 'pdf'))
ggsave(here('plots','my_png_plot2.png', width = 10, height = 6, units = "cm",
dpi = 150, device = 'png'))
myplot <- mypop +
ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
\nData from Gapminder") + ylab("Life Expentancy") + xlab("Percapita GDP in log") +
scale_x_continuous(breaks = seq(0,12,1)) +
theme_classic()
myplot
library(here)
ggsave(myplot, here("plots","my_pdf_plot.pdf"))
?ggsave
ggsave(plot = myplot, here("plots","my_pdf_plot.pdf"))
ggsave(plot = myplot, here("plots","my_png_plot.png"))
ggsave(plot = myplot, here("plots","my_jpg_plot.jpg"))
ggsave(plot = myplot, here('plots','my_pdf_plot2.pdf',
width = 10, height = 6, units = "cm",
dpi = 150, device = 'pdf'))
ggsave(plot = myplot, here('plots','my_pdf_plot2.pdf',
width = 10, height = 6, units = "in",
dpi = 150, device = 'pdf'))
ggsave(plot = myplot, here('plots','my_png_plot2.png', width = 10, height = 6, units = "cm",                            dpi = 150, device = 'png'))
ggsave(plot = myplot, 'my_png_plot2.png', width = 10, height = 6, units = "cm",                            dpi = 150, device = 'png'))
ggsave(plot = myplot, 'my_png_plot2.png', width = 10, height = 6, units = "cm",                            dpi = 150, device = 'png')
ggsave(plot = myplot, here('plots','my_png_plot2.png'), width = 10, height = 6, units = "cm",                            dpi = 150, device = 'png')
ggsave(plot = myplot, here('plots','my_pdf_plot2.pdf'),
width = 10, height = 6, units = "in",
dpi = 150, device = 'pdf')
ggsave(plot = myplot, here("plots","my_jpg_plot2.jpg"),
width = 10, height = 6, units = "cm",
dpi = 150, device = 'jpg')
ggsave(plot = myplot, here('plots','my_pdf_plot2.pdf'),
width = 10, height = 6, units = "in",
dpi = 150, device = 'pdf')
ggsave(plot = myplot, here('plots','my_png_plot2.png'),
width = 10, height = 6, units = "cm",
dpi = 150, device = 'png')
ggsave(plot = myplot, here("plots","my_jpg_plot2.jpg"),
width = 10, height = 6, units = "cm",
dpi = 150, device = 'jpg')
library(here)
ggsave(plot = myplot, here("plots","my_pdf_plot.pdf"))
ggsave(plot = myplot, here("plots","my_png_plot.png"))
ggsave(plot = myplot, here("plots","my_jpg_plot.jpg"))
rmarkdown::render('book3.Rmd')
install.packages("epiDisplay")
install.packages("epiDisplay")
library(knitr)
options(width = 90)
knitr::opts_chunk$set(tidy = TRUE, echo = TRUE, fig.margin=FALSE, fig.show = "asis", fig.align = "center", fig.width = 6, fig.asp = 1, size = "tiny", results = "markup")
# create a bib file for the R packages used in this document
knitr::write_bib(c('foreign', 'lattice', 'epiDisplay', 'psych', 'rsq', 'MASS', 'car', 'broom'), file = 'skeleton.bib')
# library
library(foreign)
library(epiDisplay)
library(psych)
library(lattice)
library(rsq)
install.packages("rsq")
library(knitr)
options(width = 90)
knitr::opts_chunk$set(tidy = TRUE, echo = TRUE, fig.margin=FALSE, fig.show = "asis", fig.align = "center", fig.width = 6, fig.asp = 1, size = "tiny", results = "markup")
# create a bib file for the R packages used in this document
knitr::write_bib(c('foreign', 'lattice', 'epiDisplay', 'psych', 'rsq', 'MASS', 'car', 'broom'), file = 'skeleton.bib')
# library
library(foreign)
library(epiDisplay)
library(psych)
library(lattice)
library(rsq)
library(MASS)
library(car)
library(broom)
# data
coronary = read.dta(here::here("data","coronary.dta"))
str(coronary)
summ(coronary[c("chol", "dbp")])
multi.hist(coronary[c("chol", "dbp")], ncol = 2)
par(mfrow = c(1, 2))
mapply(boxplot, coronary[c("chol", "dbp")],
main = colnames(coronary[c("chol", "dbp")]))
par(mfrow = c(1, 1))
# model: chol ~ dbp
slr_chol = glm(chol ~ dbp, data = coronary)
summary(slr_chol)
Confint(slr_chol)  # 95% CI
rsq(slr_chol, adj = T)
plot(chol ~ dbp, data = coronary)
abline(slr_chol)
# data
str(coronary)
coronary = subset(coronary, select = -c(id, cad, age))
# remove id, cad, age from our data since we're not going to use them,
# easier to specifiy multivariable model.
summ(coronary[c("chol", "sbp", "dbp", "bmi")])
codebook(coronary[c("race", "gender")])
plot(coronary)
multi.hist(coronary[c("chol", "sbp", "dbp", "bmi")])
par(mfrow = c(2, 2))
mapply(boxplot, coronary[c("chol", "sbp", "dbp", "bmi")],
main = colnames(coronary[c("chol", "sbp", "dbp", "bmi")]))
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
boxplot(chol ~ race, data = coronary)
boxplot(chol ~ gender, data = coronary)
par(mfrow = c(1, 1))
slr_chol0 = glm(chol ~ 1, data = coronary)
summary(slr_chol0)
names(coronary)
add1(slr_chol0, scope = ~ sbp + dbp + bmi + race + gender, test = "LRT")
# all
mlr_chol = glm(chol ~ sbp + dbp + bmi + race, data = coronary)
#mlr_chol = glm(chol ~ ., data = coronary)  # shortcut
summary(mlr_chol)
rsq(mlr_chol, adj = T)
# stepwise
# both
mlr_chol_stepboth = step(mlr_chol, direction = "both")
summary(mlr_chol_stepboth)  # racechinese marginally sig.
# forward
mlr_chol_stepforward = step(slr_chol0, scope = ~ sbp + dbp + bmi + race + gender,
direction = "forward")
summary(mlr_chol_stepforward)  # same with both
# backward
mlr_chol_stepback = step(mlr_chol, direction = "backward")
summary(mlr_chol_stepback)  # same with both
mlr_chol1 = glm(chol ~ dbp + race, data = coronary)
summary(mlr_chol1)
# + gender
mlr_chol2 = glm(chol ~ dbp + race + gender, data = coronary)
summary(mlr_chol2)  # higher AIC, gender insig.
coef(mlr_chol2); coef(mlr_chol1)
100 * (coef(mlr_chol1) - coef(mlr_chol2)[1:4])/coef(mlr_chol2)[1:4]  # change < 20%
# no notable change in coeffs, gender is not a confounder
mlr_chol3 = update(mlr_chol1, . ~ . + sbp)
summary(mlr_chol3)  # higher AIC, sbp insig.
coef(mlr_chol3); coef(mlr_chol1)
100 * (coef(mlr_chol1) - coef(mlr_chol3)[1:4])/coef(mlr_chol3)[1:4]  # change < 20%
# no notable change in coeffs, sbp is not a confounder
mlr_chol4 = update(mlr_chol1, . ~ . + bmi)
summary(mlr_chol4)  # slighly higher AIC, bmi insig.
coef(mlr_chol4); coef(mlr_chol1)
100 * (coef(mlr_chol1) - coef(mlr_chol4)[1:4])/coef(mlr_chol4)[1:4]  # change < 20%
# no notable change in coeffs of other vars (ignore intercept!)
# bmi is not a confounder
# LR test
anova(slr_chol0, mlr_chol1, test = "LRT")  # sig. better than no var at all!
# model with no var at all is called Null Model
anova(mlr_chol, mlr_chol1, test = "LRT")  # no sig. dif with all vars model,
# model with 2 vars (dbp & race) is just as good as full model (with all the vars)
# model with all vars is called Saturated Model
# AIC
AIC(slr_chol0, mlr_chol1, mlr_chol)
# our final model has the lowest AIC
vif(mlr_chol1)  # all < 10
summary(glm(chol ~ dbp*race, data = coronary))  # dbp*race not sig.
# in R, it is easy to fit interaction by *
# dbp*race will automatically include all vars involved i.e. equal to
# glm(chol ~ dbp + race + dbp:race, data = coronary)
# use : to just include just the interaction
rraw_chol = resid(mlr_chol1)  # unstandardized
multi.hist(rraw_chol)
rstd_chol = rstandard(mlr_chol1)  # standardized residuals
pstd_chol = scale(predict(mlr_chol1))  # standardized predicted values
plot(rstd_chol ~ pstd_chol, xlab = "Std predicted", ylab = "Std residuals")
abline(0, 0)  # normal, linear, equal variance
plot(rraw_chol ~ coronary$dbp, xlab = "DBP", ylab = "Raw Residuals")
abline(0, 0)
# rename the selected model
mlr_chol_final = mlr_chol1
summary(mlr_chol_final)
Confint(mlr_chol_final)  # 95% CI of the coefficients
rsq(mlr_chol_final, adj = T)
tib_mlr = tidy(mlr_chol_final, conf.int = T); tib_mlr
knitr::kable(tib_mlr)
write.csv(tib_mlr, "mlr_final.csv")
coronary$pred_chol = predict(mlr_chol_final)
head(coronary)
str(coronary[c("dbp", "race")])
# simple, dbp = 90, race = indian
predict(mlr_chol_final, list(dbp = 90, race = "indian"))
new_data = data.frame(dbp = c(90, 90, 90), race = c("malay", "chinese", "indian"))
new_data
predict(mlr_chol_final, new_data)
new_data$pred_chol = predict(mlr_chol_final, new_data)
new_data
