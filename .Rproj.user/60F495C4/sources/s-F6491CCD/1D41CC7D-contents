---
title:  "| Data visualization\n| Using **ggplot2** to work with plots\n"
author: |
  | Kamarul Imran Musa
  | Associate Professor (Epidemiology and Statistics)
date: "`r Sys.Date()`"
output:
  pdf_document:
    number_sections: yes
    toc: yes
    toc_depth: 3
  html_document:
    df_print: paged
    toc: yes
    toc_depth: '3'
---

\newpage

```{r, echo=FALSE}
knitr::opts_chunk$set(out.width = '70%' , fig.align = 'center') 
```

# Data Visualization

## Introduction to visualization

Data visualization is viewed by many disciplines as a modern equivalent of visual communication. It involves the creation and study of the visual representation of data. 

Data visualization requires "information that has been abstracted in some schematic form, including attributes or variables for the units of information".

References on data visualization: 

1.  Link 1 <https://en.m.wikipedia.org/wiki/Data_visualization>
2.  Link 2 <https://en.m.wikipedia.org/wiki/Michael_Friendly>  

### History of data visualization

1983 book The Visual Display of Quantitative Information, Edward Tufte defines **graphical displays** and principles for effective graphical display

The book defines "Excellence in statistical graphics consists of complex ideas communicated with clarity, precision and efficiency."

### Processes and Objectives of visualization

Visualization is the process of  representing data graphically and  interacting with these representations. The objective is to gain insight into the data. 

Reference: <http://researcher.watson.ibm.com/researcher/view_group.php?id=143>

## What makes good graphics


You may require these to make good graphics:

1.  Data
2.  Substance rather than about methodology, graphic design, the technology of graphic production or something else
3.  No distortion to what the data has to say
4.  Presence of many numbers in a small space
5.  Coherence for large data sets
6.  Encourage the eye to compare different pieces of data
7.  Reveal the data at several levels of detail, from a broad overview to the fine structure
8.  Serve a reasonably clear purpose: description, exploration, tabulation or decoration
9.  Be closely integrated with the statistical and verbal descriptions of a data set.

## Graphics packages in R

There are many **graphics packages** in R. Some packages are aimed to perform general tasks related with graphs. Some provide specific graphics for certain analyses.

The popular general graphics packages in R are:

1.  **graphics** : a base R package
2.  **ggplot2** : a user-contributed package by Hadley Wickham
3.  **lattice** : a user-contributed package


Except for **graphics** package (a a base R package), other packages need to downloaded and installed into your R library. 

Examples of other more specific packages - to run graphics for certain analyses - are:

1.  **survminer::ggsurvlot**
2.  **sjPlot**

For this course, we will focus on using the **ggplot2** package. 

## Introduction to **ggplot2** package

- **ggplot2** is an elegant, easy and versatile general graphics package in R. 
- it implements the **grammar of graphics** concept
- the advantage of this concept is that, it fasten the process of learning graphics 
- it also facilitates the process of creating complex graphics

To work with **ggplot2**, remember

- start with: `ggplot()`
- which data: `data = X`
- which variables: `aes(x = , y = )`
- which graph: `geom_histogram()`, `geom_points()`

The official website for ggplot2 is here <http://ggplot2.org/>.

*ggplot2 is a plotting system for R, based on the grammar of graphics, which tries to take the good parts of base and lattice graphics and none of the bad parts. It takes care of many of the fiddly details that make plotting a hassle (like drawing legends) as well as providing a powerful model of graphics that makes it easy to produce complex multi-layered graphics.*

## Preparation

### Set a new project or set the working directory

It is always recommended that to start working on data analysis in RStudio, you create first a new project.

Go to File, then click New Project. 

You can create a new R project based on existing directory. This method is useful because an RStudio project keep your data, your analysis, and outputs in a clean dedicated folder or sets of folders.

If you do not want to create a new project, then make sure you are inside the correct directory (the working directory). The working directory is a folder where you store. 

Type `getwd()` in your Console to display your working directory. Inside your working directory, you should see and keep

1.  dataset or datasets
2.  outputs - plots 
3.  codes (R scripts `.R`, R markdown files `.Rmd`)

### Questions to ask before making graphs

You must ask yourselves these:

1.  Which variable or variables do I want to plot?
2.  What is (or are) the type of that variable? 
- Are they factor (categorical) variables ? 
- Are they numerical variables?
3.  Am I going to plot 
- a single variable?
- two variables together?
- three variables together?

 

### Read data

The common data formats include

1.  comma separated files (`.csv`)
2.  MS Excel file (`.xlsx`)
3.  SPSS file (`.sav`)
4.  Stata file (`.dta`)
5.  SAS file 

Packages that read these data include **haven** package

1.  SAS: `read_sas()` reads .sas7bdat + .sas7bcat files and read_xpt() reads SAS transport files (version 5 and version 8). write_sas() writes .sas7bdat files.
2.  SPSS: `read_sav()` reads .sav files and read_por() reads the older .por files. write_sav() writes .sav files.
3.  Stata: `read_dta()` reads .dta files (up to version 15). write_dta() writes .dta files (versions 8-15).

Data from databases are less common but are getting more important and more common. Some examples of databases

1.  MySQL
2.  SQLite
3.  Postgresql
4.  Mariadb


### Load the library

**ggplot2** is one of the core member of **tidyverse** package (<https://www.tidyverse.org/>). 

Once we load the **tidyverse** package, we will also have access to

1.  help pages
2.  functions
3.  datasets

```{r}
library(tidyverse)
```

If you run the code and you see *there is no package called tidyverse* then you need to install the **tidyverse** package.

to do that type `install.package("tidyverse")`, then run again `library(tidyverse)`.

### Open dataset

For now, we will use the built-in dataset in the **gapminder** package.

You can read more about *gapminder* from <https://www.gapminder.org/>

The website contains many useful datasets and show wonderful graphics. It is made popular by Dr Hans Rosling.

Load the package, 

```{r}
library(gapminder)
```

call the data into R and browse the data the top of the data

```{r}
head(gapminder)
```

We can list the variables and look at the type of the variables in the dataset

```{r}
glimpse(gapminder)
```

The data have

1.  6 variables
2.  1704 observations
3.  There are 2 factor variables, 2 integer variables and 2 numeric variables

We can examine the basic statistics of the datasets by using `summary()`. It will list

1.  frequencies 
2.  min, 1st quartile, median, mean, 3rd quartile and max

```{r}
summary(gapminder)
```

To know more about the the package, we can use $?$ 

```{r}
?gapminder
```


## Basic plot

We can start create a basic plot

- data = gapminder
- variables = year, lifeExp
- graph = scatterplot

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp))
```

The plot shows:

1.  the relationship between year and life expectancy. 
2.  as year advances, the life expectancy increases. 

the `ggplot()` tells R to plot what variables from what data. And `geom_point()` tells R to make a scatter plot.

## Adding another variable

You realize that we plotted 2 variables based on `aes()`. We can add the third variable to make a more complicated plot. 

For example:

1.  data = gapminder
2.  variables = year, life expectancy, continent

Objective: to plot the relationship between year and life expectancy based on continent.

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp, colour = continent))

```

What can you see from the scatterplot. 

1.  Europe countries have high life expectancy
2.  Africa countries have lower life expectancy
3.  One Asia country looks like an outlier (very low life expectancy)
4.  One Africa country looks like an outlier (very low life expectancy)


Now, we will replace the 3rd variable with GDP (variable gdpPercap) and make the plot correlates with the size of GDP.

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp, size = gdpPercap))

```

ggplot2 will automatically assign a unique level of the aesthetic (here a unique color) to each unique value of the variable, a process known as scaling. 

ggplot2 will also add a legend that explains which levels correspond to which values.

The plot suggets that higher GDP countries have longer life expectancy. 


Instead of using colour, we can use shape especially in instances where there is no facility to print out colour plots

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp, shape = continent))

```

But, see what will happen if you set the colour and shape like below but outside the aes parentheses.

colour as blue

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp), colour = 'blue')

```


shape as plus 


```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp), shape = 3)

```

You can type $?pch$ to see the number that correspond to the shape


## Making subplots

We can split our plots based on a factor variable and make subplots using the `facet()`.

For example, if we want to make subplots based on continents, you can run these codes

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp)) + 
  facet_wrap(~ continent, nrow = 3)
```

and change the nrow

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = year, y = lifeExp)) + 
  facet_wrap(~ continent, nrow = 2)
```

## Overlaying plots

Each `geom_X()` in ggplot2 indicates different visual objects.

Scatterplot

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = gdpPercap, y = lifeExp))
```
 

Smooth line

```{r}
ggplot(data = gapminder) +
  geom_smooth(mapping = aes(x = gdpPercap, y = lifeExp))
```

And we can regenerate the smooth plot based on continent using the `linetype()`. We use `log(gdpPercap)` to reduce the skewness of the data.

```{r}
ggplot(data = gapminder) +
  geom_smooth(mapping = aes(x = log(gdpPercap), y = lifeExp, linetype = continent))
```

Another plot but using colour

```{r}
ggplot(data = gapminder) +
  geom_smooth(mapping = aes(x = log(gdpPercap), y = lifeExp, colour = continent))
```


## Combining geom

We can combine more than one geoms to overlay plots. The trick is to use multiple geoms in a single line of R code

```{r}
ggplot(data = gapminder) +
  geom_point(mapping = aes(x = log(gdpPercap), y = lifeExp)) +
  geom_smooth(mapping = aes(x = log(gdpPercap), y = lifeExp))
```

The codes above show duplication or repetition. To avoid this, we can pass the mapping to `ggplot()`. 

```{r}
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
  geom_point() +
  geom_smooth()
```

And we can expand this to make scatterplot shows different colour for continent
 

```{r}
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
  geom_point(mapping = aes(colour = continent)) +
  geom_smooth()
```

Or expand this to make the smooth plot shows different colour for continent

```{r}
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
  geom_point() +
  geom_smooth(mapping = aes(colour = continent))
```

Or both the scatterplot and the smoothplot

```{r}
ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
  geom_point(mapping = aes(shape = continent)) +
  geom_smooth(mapping = aes(colour = continent))

```


## Statistical transformation

Let us create a bar chart, with y axis as the frequency.

```{r}
ggplot(data = gapminder) +
  geom_bar(mapping = aes(x = continent))
```

If we want the y-axis to show proportion, we can use these codes

```{r}
ggplot(data = gapminder) +
  geom_bar(mapping = aes(x = continent, y = ..prop..,
                         group = 1))
```


## Customizing title

We can customize many aspects of the plot using ggplot package. 

For example, from gapminder dataset, we choose GDP and log it (to reduce skewness) and life expectancy, and make a scatterplot. We named the plot as `my_pop`

```{r}
mypop <- ggplot(data = gapminder, mapping = aes(x = log(gdpPercap), y = lifeExp)) +
  geom_point() +
  geom_smooth(mapping = aes(colour = continent))
mypop
```

You will notice that there is no title in the plot. A title can be added to the plot.

```{r}
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy")
```

Title in multiple lines by adding `\n`

```{r}
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
                \nData from Gapminder")
```


## Adjusting axes

We can specify the tick marks

1.  min = 0
2.  max = 12
3.  interval = 1

```{r}
mypop + scale_x_continuous(breaks = seq(0,12,1))
```

And we can label the x-axis and y-axis

```{r}
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
                \nData from Gapminder") + ylab("Life Expentancy") + xlab("Percapita GDP in log")
```

## Choosing theme

The default is gray theme or `theme_gray()`

The black and white theme

```{r}
mypop + theme_bw()
```

Classic theme

```{r}
mypop + theme_classic()
```



## Saving plot 

The preferred format for saving file is PDF.

## Saving plot using ggplot2

We can save the last plot (plot on the screen) to a file. 

For example, let us create a more complete plot with added title, x label and y label and a classic theme

```{r}
mypop + ggtitle("Scatterplot showing the relationship of GDP in log and life expectancy:
                \nData from Gapminder") + ylab("Life Expentancy") + xlab("Percapita GDP in log") +
  scale_x_continuous(breaks = seq(0,12,1)) +
  theme_classic()
```


And we want to save the plot (now on the screen) to these formats:

1.  pdf format
2.  png format
3.  jpg format


```{r}
ggsave("my_pdf_plot.pdf")
ggsave("my_png_plot.png") 
ggsave("my_jpg_plot.jpg")
```

We can customize the 

1.  width = 10 cm
2.  height = 6 cm
3.  dpi = 100

```{r}
ggsave("my_pdf_plot2.pdf", width = 10, height = 6, units = "cm")
ggsave("my_png_plot2.png", width = 10, height = 6, units = "cm")
ggsave("my_jpg_plot2.jpg", width = 10, height = 6, units = "cm")
```


